version: 2.1

orbs:
  python: circleci/python@2.1.1

executors:
  app-executor:
    parameters:
      workspace-dir:
        type: string
        default: /tmp/workspace
    environment:
      WORKSPACE_DIR: << parameters.workspace-dir >>
    docker:
      - image: cimg/python:3.10
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS

aliases:
  - &python-executor
      name: python/default
      tag: "3.10"

fast-checkout: &fast-checkout
  attach_workspace:
    at: /tmp/workspace

jobs:
  requirements:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          args: "--no-interaction --no-root"
          pkg-manager: poetry
      - run:
          command: |
            poetry check

  ruff:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          args: "--no-interaction --no-root --only dev"
          pkg-manager: poetry
      - run: &git-diff-py-files
          name: List added, copied, modified, and renamed *py files
          command: |
            git diff --name-only --diff-filter=ACMR origin/main | grep -E "(.py$)" > diff.txt || true
      - run:
          name: Ruff linting
          command: |
            poetry run ruff check --config=pyproject.toml . &> lint_checks.txt || true
      - run:
          name: Diff-based ruff
          command: &display-lint-errors |
            grep -Ff diff.txt lint_checks.txt > lint_errors.txt || true
            if [ -s lint_errors.txt ]; then
              cat lint_errors.txt
              printf 'Run the following command to fix your branch:\n make fixes'
              exit 1
            fi

  black:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          args: "--no-interaction --no-root --only dev"
          pkg-manager: poetry
      - run: *git-diff-py-files
      - run:
          name: Black code formatting
          command: |
            poetry run black --check --diff --color --config=pyproject.toml . &> lint_checks.txt || true
      - run:
          name: Diff-based black
          command: *display-lint-errors

  persist-checkout:
    executor: app-executor
    steps:
      - checkout
      - run:
          name: Store image tag
          command: |
            echo "IMAGE_TAG=$(echo `git log -n1 --format="%h"`)" >> $HOME/env
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
            - env

  test:
    executor: app-executor
    parallelism: 2
    environment:
      TEST_RESULTS: /tmp/test-results
    steps:
      - *fast-checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: $WORKSPACE_DIR
      - run:
          name: Unit tests
          command: |
            mkdir -p $TEST_RESULTS
            cd $WORKSPACE_DIR/project/$APP_DIR
            docker compose up -d --build
            docker compose exec django python -V && poetry -V
            docker compose exec django poetry install --with test,dev

            echo "*** Running tests with docker compose, poetry, and django unittest..."
            docker compose exec django poetry run python manage.py test

            echo "*** Running tests with docker compose, poetry, and pytest..."
            docker compose exec django poetry run pytest

            docker compose down
      - store_artifacts:
          path: $TEST_RESULTS
          destination: raw-test-output
      - store_test_results:
          path: $TEST_RESULTS

  build:
    executor: app-executor
    steps:
      - *fast-checkout
      - setup_remote_docker:
           docker_layer_caching: true
      - run:
          name: Build django image
          command: |
            set -ex
            cd $WORKSPACE_DIR/project
            source $WORKSPACE_DIR/env
            docker build -t ldssa/django:$IMAGE_TAG .
            mkdir -p $WORKSPACE_DIR/image
            docker save -o $WORKSPACE_DIR/image/django.tar ldssa/django:$IMAGE_TAG
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - image/django.tar

  push:
    executor: app-executor
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Push django image
          command: |
            source $WORKSPACE_DIR/env
            docker load -i $WORKSPACE_DIR/image/django.tar            
            echo "$DOCKER_PASS" | docker login -u $DOCKER_USER --password-stdin
            docker push ldssa/django:$IMAGE_TAG

workflows:

  ci:
    jobs:
      - requirements:
          name: Validate requirements
          filters: &ci-filter
            branches:
              ignore: main

      - ruff:
          name: Ruff linting
          filters: *ci-filter
          requires:
            - Validate requirements

      - black:
          name: Black code formatting
          filters: *ci-filter
          requires:
            - Validate requirements

  workflow:
    jobs:
      - persist-checkout:
          context: 
            - Common Env

      - build:
          context: 
            - Common Env
          requires:
            - persist-checkout

      - test:
          context: 
            - Common Env
          requires:
            - build

      - approval:
          type: approval
          context: 
            - Common Env
          requires:
            - test

      - push:
          context: 
            - Common Env
          requires:
            - approval
