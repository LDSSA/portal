version: 2.1

orbs:
  python: circleci/python@2.1.1

executors:
  app-executor:
    docker:
      - image: cimg/python:3.10
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS

aliases:
  - &python-executor
      name: python/default
      tag: "3.10"

fast-checkout: &fast-checkout
  attach_workspace:
    at: /tmp/workspace

jobs:
  requirements:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          args: "--no-interaction --no-root"
          pkg-manager: poetry
      - run:
          command: |
            poetry check

  black:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          args: "--no-interaction --no-root --only dev"
          pkg-manager: poetry
      - run:
          name: List added, copied, modified, and renamed *py files
          command: |
            git diff --name-only --diff-filter=ACMR origin/main | grep -E "(.py$)" > diff.txt || true
      - run:
          name: Black code formatting
          command: |
            poetry run black --check --diff --color --config=pyproject.toml . &> lint_checks.txt || true
      - run:
          name: Diff-based black
          command: display-lint-errors |
            grep -Ff diff.txt lint_checks.txt > lint_errors.txt || true
            if [ -s lint_errors.txt ]; then
              cat lint_errors.txt
              printf 'Run the following command to fix your branch:\n make fixes'
              exit 1
            fi

  persist-checkout:
    executor: app-executor
    # docker:
    #   - image: circleci/python:3.9
    #     auth:
    #       username: $DOCKER_USER
    #       password: $DOCKER_PASS
    steps:
      - checkout
      - run:
          name: Store image tag
          command: |
            echo "IMAGE_TAG=$(echo `git log -n1 --format="%h"`)" >> $HOME/env
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
            - env

  build:
    executor: app-executor
    # docker:
    #   - image: circleci/python:3.9
    #     auth:
    #       username: $DOCKER_USER
    #       password: $DOCKER_PASS
    steps:
      - *fast-checkout
      - setup_remote_docker
      - run:
          name: Build django image
          command: |
            set -ex
            cd /tmp/workspace/project
            source /tmp/workspace/env
            docker build -t ldssa/django:$IMAGE_TAG .
            mkdir -p /tmp/workspace/image
            docker save -o /tmp/workspace/image/django.tar ldssa/django:$IMAGE_TAG
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - image/django.tar
  push:
    executor: app-executor
    # docker:
    #   - image: circleci/python:3.9
    #     auth:
    #       username: $DOCKER_USER
    #       password: $DOCKER_PASS
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Push django image
          command: |
            source /tmp/workspace/env
            docker load -i /tmp/workspace/image/django.tar
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push ldssa/django:$IMAGE_TAG

workflows:

  ci:
    jobs:
      - requirements:
          name: Validate requirements
          filters: &ci-filter
            branches:
              ignore: main

      - black:
          name: Black code formatting
          filters: *ci-filter
          requires:
            - Validate requirements

  workflow:
    jobs:
      - persist-checkout:
          context: 
            - Common Env
      - build:
          context: 
            - Common Env
          requires:
            - persist-checkout
      - approval:
          type: approval
          context: 
            - Common Env
          requires:
            - build
      - push:
          context: 
            - Common Env
          requires:
            - approval
